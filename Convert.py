import os
import sys

### ----------------------User-defined parameters------------------------- 

## File settings
# output_dir: Path to the output directory.
output_dir = 'output'
# IDchem: Identifier for the output mechanism
# NOTE: This is used to name the output files, e.g., [IDchem].species, [IDchem].reactions, [IDchem].aer, [IDchem].aer.1st, [IDchem].aer.vec, [IDchem].RO2, [IDchem].mol
IDchem = 'GECKO_API'
# reaction_file: Path to the file containing the mechanism
# NOTE: For GECKO mechanism, reaction_file is the FOLDER containing the mechanism files. No need to further specify species_file and species_type.
reaction_file = './input/API2_GECKO-A'
#reaction_file = './input/API_MCM/mcm_API_reactions.fac'
# reaction_type: 'FACSMILE' for MCM, 'GECKO', 'SSH'
reaction_type = 'GECKO'
#reaction_type = 'FACSMILE'
# species_file: Path to the file containing the species information
species_file = './input/API_MCM/mcm_API_species.tsv'
# species_type: 'MCM', 'GECKO', 'SSH'
species_type = 'MCM'

## Conversion flags
tag_fake = False

## Aerosol properties
# soap_file: Path to the file containing the SOAP decomposition information. If not available, set to None.
# NOTE: This file is generated by running SSH-aerosol with the aerosol species list [name].aer.1st
soap_file = None

## Saturation vapor pressure computed by UManSysProp (Topping et al., 2016)
# vptype: VP0BP0, VP0BP1, VP0BP2, VP1BP0, VP1BP1, VP1BP2, evap, simpol
# VP for vapor ponit : 0 - Nannoolal et al., 2008, 1 - Myrdal and Yalkowsky, 1997
# BP for boilling point: 0 - Nannoolal et al., 2004, 1 - Stein and Brown, 1994, 2 - Joback and Reid, 1987
# 'evap': EVAPORATION of Compernolle et al. (2011)
# 'simpol': SIMPOL.1 of Pankow and Asher (2008)
vpType = 'simpol'
# psat_nvoc: non-volatile if Psat < psat_nvoc in atm. If all species are volatile or semi-volatile, set to None.
psat_nvoc = None
# psat_svoc: volatile if Psat > psat_svoc in atm. This species will not be included in the aerosol species list.
psat_svoc = 1E9

## Other basic settings
# species_list_aer: default aerosol species list - the first 10 lines and the last line of this file are used to generate new aerosol species list.
species_list_aer_init = './data/species-list-aer-genoa.dat'
# basic_species_files: default list of inorganic species
basic_species_files = ['./data/ssh_basic_species.dat', './data/GECKO_basic_species.dat', './data/mcm_species.dat']
# ./data/GECKO_basic_species.dat
# ./dara/mcm_species.dat

# Total No. functional group in SOAP
n_soap_group = 60
### ----------------------------------------------------------------------- 

def isfloat(value):
    """Check if a string is a float"""
    try:
        float(value)
        return True
    except ValueError:
        return False

# Species involved in the reaction list but do not participate in reduction
BaseSpeciesDict = {}
for ifile in basic_species_files:
    with open (ifile,'r') as f: lines = f.read().splitlines()
    for line in lines:
        line = line.strip()
        if line == '' or line.startswith('#') or line.startswith('%'): continue
        parts = [i for i in line.replace('\t',' ').split(' ') if i != '']
        if len(parts) == 2:
            s, mw = parts[0], float(parts[1])
            if s not in BaseSpeciesDict.keys(): BaseSpeciesDict[s] = mw
            else: # already recorded, check value
                if BaseSpeciesDict[s] != mw:
                    print(f'species {s} has different molar mass. Update its mass from {BaseSpeciesDict[s]} to {mw}.')
                    BaseSpeciesDict[s] = mw
        else: print(f'!!! Can not read species information from file: {line} in file {ifile}\n')
BaseSpecies = set(BaseSpeciesDict.keys())
print(f'Load in total # {len(BaseSpeciesDict)} basic species from the default list and {basic_species_files}.')

if __name__ == '__main__':

    from DataStream import read_chem_sets, to_SSH_sets

    print('Start conversion...')
    # Read the mechanism
    if reaction_type == 'GECKO': print('Reading GECKO mechanism from folder:', reaction_file)
    elif reaction_type == 'FACSMILE': print('Reading MCM mechanism from files:', reaction_file, species_file)
    elif reaction_type == 'SSH': print('Reading SSH mechanism from files:', reaction_file, species_file)
    else: raise ValueError('Unknown reaction type:', reaction_type)
    reactions, species = read_chem_sets(reaction_file, species_file, reaction_type, species_type, aero_vfile=soap_file)

    # Modification of the mechanism is done here if needed
    # ...

    # Output the mechanism in SSH-aerosol v2.0 format
    print(f'Outputting mechanism {IDchem} to folder:', os.path.join(output_dir, IDchem))
    to_SSH_sets(output_dir, IDchem, reactions, species, tag_fake=tag_fake)
    print('Conversion is done!')
